// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`dependencyGraphService initializes 1`] = `
[
  {
    "block": "import {
  date,
  myFunction,
  NodeRelations,
} from "./utils";",
    "edits": [],
    "endLine": 5,
    "external": undefined,
    "id": "8204690232c2466371e669a014ef72327fa8f369",
    "kind": "ImportDeclaration",
    "name": "date",
    "path": "/test-project/src/index.ts",
    "startLine": 1,
    "typeSignature": "date = () =>
  z.string().transform((v) => {
    const date = v.replace(/(\\\\d+)(st|nd|rd|th)/, "$1");
    return isNaN(new Date(date).getTime()) ? undefined : new Date(date);
  })
",
  },
  {
    "block": "import {
  date,
  myFunction,
  NodeRelations,
} from "./utils";",
    "edits": [],
    "endLine": 5,
    "external": undefined,
    "id": "134600b64a94189aa5713e98127bf32f0ab0f0b6",
    "kind": "ImportDeclaration",
    "name": "myFunction",
    "path": "/test-project/src/index.ts",
    "startLine": 1,
    "typeSignature": "",
  },
  {
    "block": "import {
  date,
  myFunction,
  NodeRelations,
} from "./utils";",
    "edits": [],
    "endLine": 5,
    "external": undefined,
    "id": "3c7052ef9bd663d73fba4ff6d45642ca28fca8a4",
    "kind": "ImportDeclaration",
    "name": "NodeRelations",
    "path": "/test-project/src/index.ts",
    "startLine": 1,
    "typeSignature": "",
  },
  {
    "block": "const n = new NodeRelations(false);",
    "edits": [],
    "endLine": 11,
    "id": "1216684097590598af275e16687b2cc97854fca6",
    "kind": "VariableDeclaration",
    "name": "n",
    "path": "/test-project/src/index.ts",
    "startLine": 11,
    "typeSignature": "n = new NodeRelations(false)
",
  },
  {
    "block": "n.addEdge();",
    "edits": [],
    "endLine": 12,
    "id": "434b34fc9e1caa8083526e928d9a0ae576d7876b",
    "kind": "ExpressionStatement",
    "name": "n",
    "path": "/test-project/src/index.ts",
    "startLine": 12,
    "typeSignature": "any",
  },
  {
    "block": "date().parse("19th September 2023");",
    "edits": [],
    "endLine": 9,
    "id": "011126099144ccb4bcd717bfd267d60587d8cc90",
    "kind": "ExpressionStatement",
    "name": "date",
    "path": "/test-project/src/index.ts",
    "startLine": 9,
    "typeSignature": "any",
  },
  {
    "block": "myFunction("test");",
    "edits": [],
    "endLine": 14,
    "id": "476de9c76d6f44d72d2b1245a9a93c7b94a99a1f",
    "kind": "ExpressionStatement",
    "name": "myFunction",
    "path": "/test-project/src/index.ts",
    "startLine": 14,
    "typeSignature": "any",
  },
  {
    "block": "import React from "react";",
    "edits": [],
    "endLine": 1,
    "external": undefined,
    "id": "8d3590288ac41a8c5b067a2667185d9401b0cb8f",
    "kind": "ImportDeclaration",
    "name": "React",
    "path": "/test-project/src/app/index.tsx",
    "startLine": 1,
    "typeSignature": "any",
  },
  {
    "block": "import ReactDOM from "react-dom";",
    "edits": [],
    "endLine": 2,
    "external": undefined,
    "id": "5e4ef8797659e2a8c5c502eec67bbfcd459c9d46",
    "kind": "ImportDeclaration",
    "name": "ReactDOM",
    "path": "/test-project/src/app/index.tsx",
    "startLine": 2,
    "typeSignature": "any",
  },
  {
    "block": "function App() {
  return (
    <div>
      <h1>My React App</h1>
      <MyNewComponent />
    </div>
  );
}",
    "edits": [],
    "endLine": 11,
    "id": "96e3c33ad729df45fc174ad584ff76561b151355",
    "kind": "FunctionDeclaration",
    "name": "App",
    "path": "/test-project/src/app/index.tsx",
    "startLine": 4,
    "typeSignature": "() => JSX.Element
",
  },
  {
    "block": "ReactDOM.render(<App />, document.getElementById("root"));",
    "edits": [],
    "endLine": 17,
    "id": "30fd08e8612650dedd7f10b31ffbc8a44324396f",
    "kind": "ExpressionStatement",
    "name": "ReactDOM",
    "path": "/test-project/src/app/index.tsx",
    "startLine": 17,
    "typeSignature": "any",
  },
  {
    "block": "function MyNewComponent() {
  return <p>This is my new component</p>;
}",
    "edits": [],
    "endLine": 15,
    "id": "f71ccda3b25eb2c469d5d7c9d28526b913f28df8",
    "kind": "FunctionDeclaration",
    "name": "MyNewComponent",
    "path": "/test-project/src/app/index.tsx",
    "startLine": 13,
    "typeSignature": "() => JSX.Element
",
  },
  {
    "block": "export async function listDirectory(dir: string): Promise<null> {
  console.log("Listing directory", dir);
  return Promise.resolve(null);
}",
    "edits": [],
    "endLine": 4,
    "id": "2c69e417f3abb8fe23eec60a5a0241f706e58cec",
    "kind": "FunctionDeclaration",
    "name": "listDirectory",
    "path": "/test-project/src/utils/dir.ts",
    "startLine": 1,
    "typeSignature": "(dir: string) => Promise<null>
",
  },
  {
    "block": "import { useQuery } from "@tanstack/react-query";",
    "edits": [],
    "endLine": 1,
    "external": {
      "exports": [
        "export * from '@tanstack/query-core';",
        "export { DefinedUseInfiniteQueryResult, DefinedUseQueryResult, UseBaseMutationResult, UseBaseQueryOptions, UseBaseQueryResult, UseInfiniteQueryOptions, UseInfiniteQueryResult, UseMutateAsyncFunction, UseMutateFunction, UseMutationOptions, UseMutationResult, UseQueryOptions, UseQueryResult, UseSuspenseInfiniteQueryOptions, UseSuspenseInfiniteQueryResult, UseSuspenseQueryOptions, UseSuspenseQueryResult } from './types.js';",
        "export { QueriesOptions, QueriesResults, useQueries } from './useQueries.js';",
        "export { useQuery } from './useQuery.js';",
        "export { useSuspenseQuery } from './useSuspenseQuery.js';",
        "export { useSuspenseInfiniteQuery } from './useSuspenseInfiniteQuery.js';",
        "export { SuspenseQueriesOptions, SuspenseQueriesResults, useSuspenseQueries } from './useSuspenseQueries.js';",
        "export { DefinedInitialDataOptions, UndefinedInitialDataOptions, queryOptions } from './queryOptions.js';",
        "export { DefinedInitialDataInfiniteOptions, UndefinedInitialDataInfiniteOptions, infiniteQueryOptions } from './infiniteQueryOptions.js';",
        "export { QueryClientContext, QueryClientProvider, QueryClientProviderProps, useQueryClient } from './QueryClientProvider.js';",
        "export { QueryErrorResetBoundary, QueryErrorResetBoundaryProps, useQueryErrorResetBoundary } from './QueryErrorResetBoundary.js';",
        "export { HydrationBoundary, HydrationBoundaryProps } from './HydrationBoundary.js';",
        "export { useIsFetching } from './useIsFetching.js';",
        "export { useIsMutating, useMutationState } from './useMutationState.js';",
        "export { useMutation } from './useMutation.js';",
        "export { useInfiniteQuery } from './useInfiniteQuery.js';",
        "export { IsRestoringProvider, useIsRestoring } from './isRestoring.js';",
      ],
      "importedFrom": "@tanstack/react-query",
    },
    "id": "b01d70a38703c8b8c0d59b211431fdba0462fd3a",
    "kind": "ImportDeclaration",
    "name": "useQuery",
    "path": "/test-project/src/utils/index.ts",
    "startLine": 1,
    "typeSignature": "declare function useQuery<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>, queryClient?: QueryClient): DefinedUseQueryResult<TData, TError>;

type DefaultError = Register extends {
    defaultError: infer TError;
} ? TError : Error;
type QueryKey = ReadonlyArray<unknown>;
type NonUndefinedGuard<T> = T extends undefined ? never : T;
type DefinedInitialDataOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey> = UseQueryOptions<TQueryFnData, TError, TData, TQueryKey> & {
    initialData: NonUndefinedGuard<TQueryFnData> | (() => NonUndefinedGuard<TQueryFnData>);
};
type DataTag<TType, TValue> = TType & {
    [dataTagSymbol]: TValue;
};
type Updater<TInput, TOutput> = TOutput | ((input: TInput) => TOutput);
type NoInfer<T> = [T][T extends any ? 0 : never];
type FetchInfiniteQueryOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown> = FetchQueryOptions<TQueryFnData, TError, InfiniteData<TData, TPageParam>, TQueryKey, TPageParam> & InitialPageParam<TPageParam> & FetchInfiniteQueryPages<TQueryFnData, TPageParam>;
type Partial<T>={[P in keyof T]?:T[P];};
type OmitKeyof<TObject, TKey extends TStrictly extends 'safely' ? keyof TObject | (string & Record<never, never>) : keyof TObject, TStrictly extends 'strictly' | 'safely' = 'strictly'> = Omit<TObject, TKey>;
type MutationKey = ReadonlyArray<unknown>;
type DefaultedQueryObserverOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryData = TQueryFnData, TQueryKey extends QueryKey = QueryKey> = WithRequired<QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>, 'throwOnError' | 'refetchOnReconnect' | 'queryHash'>;
type DefinedQueryObserverResult<TData = unknown, TError = DefaultError> = QueryObserverRefetchErrorResult<TData, TError> | QueryObserverSuccessResult<TData, TError>;
type DefinedUseQueryResult<TData = unknown, TError = DefaultError> = DefinedQueryObserverResult<TData, TError>;

declare function useQuery<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>, queryClient?: QueryClient): UseQueryResult<TData, TError>;

type DefaultError = Register extends {
    defaultError: infer TError;
} ? TError : Error;
type QueryKey = ReadonlyArray<unknown>;
type UndefinedInitialDataOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey> = UseQueryOptions<TQueryFnData, TError, TData, TQueryKey> & {
    initialData?: undefined;
};
type DataTag<TType, TValue> = TType & {
    [dataTagSymbol]: TValue;
};
type Updater<TInput, TOutput> = TOutput | ((input: TInput) => TOutput);
type NoInfer<T> = [T][T extends any ? 0 : never];
type FetchInfiniteQueryOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown> = FetchQueryOptions<TQueryFnData, TError, InfiniteData<TData, TPageParam>, TQueryKey, TPageParam> & InitialPageParam<TPageParam> & FetchInfiniteQueryPages<TQueryFnData, TPageParam>;
type Partial<T>={[P in keyof T]?:T[P];};
type OmitKeyof<TObject, TKey extends TStrictly extends 'safely' ? keyof TObject | (string & Record<never, never>) : keyof TObject, TStrictly extends 'strictly' | 'safely' = 'strictly'> = Omit<TObject, TKey>;
type MutationKey = ReadonlyArray<unknown>;
type DefaultedQueryObserverOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryData = TQueryFnData, TQueryKey extends QueryKey = QueryKey> = WithRequired<QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>, 'throwOnError' | 'refetchOnReconnect' | 'queryHash'>;
type UseBaseQueryResult<TData = unknown, TError = DefaultError> = QueryObserverResult<TData, TError>;
type UseQueryResult<TData = unknown, TError = DefaultError> = UseBaseQueryResult<TData, TError>;

declare function useQuery<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, queryClient?: QueryClient): UseQueryResult<TData, TError>;

type DefaultError = Register extends {
    defaultError: infer TError;
} ? TError : Error;
type QueryKey = ReadonlyArray<unknown>;
type DataTag<TType, TValue> = TType & {
    [dataTagSymbol]: TValue;
};
type Updater<TInput, TOutput> = TOutput | ((input: TInput) => TOutput);
type NoInfer<T> = [T][T extends any ? 0 : never];
type FetchInfiniteQueryOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown> = FetchQueryOptions<TQueryFnData, TError, InfiniteData<TData, TPageParam>, TQueryKey, TPageParam> & InitialPageParam<TPageParam> & FetchInfiniteQueryPages<TQueryFnData, TPageParam>;
type Partial<T>={[P in keyof T]?:T[P];};
type OmitKeyof<TObject, TKey extends TStrictly extends 'safely' ? keyof TObject | (string & Record<never, never>) : keyof TObject, TStrictly extends 'strictly' | 'safely' = 'strictly'> = Omit<TObject, TKey>;
type MutationKey = ReadonlyArray<unknown>;
type DefaultedQueryObserverOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryData = TQueryFnData, TQueryKey extends QueryKey = QueryKey> = WithRequired<QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>, 'throwOnError' | 'refetchOnReconnect' | 'queryHash'>;
type UseBaseQueryResult<TData = unknown, TError = DefaultError> = QueryObserverResult<TData, TError>;
type UseQueryResult<TData = unknown, TError = DefaultError> = UseBaseQueryResult<TData, TError>;
",
  },
  {
    "block": "import { z } from "zod";",
    "edits": [],
    "endLine": 2,
    "external": {
      "exports": [
        "export * from "./lib";",
      ],
      "importedFrom": "zod",
    },
    "id": "9f412e876bc9c60f4b805f54a113791059aad2e2",
    "kind": "ImportDeclaration",
    "name": "z",
    "path": "/test-project/src/utils/index.ts",
    "startLine": 2,
    "typeSignature": "",
  },
  {
    "block": "export class NodeRelations {
  protected hasCycle = false;

  constructor(hasCycle: boolean) {
    this.hasCycle = hasCycle;
  }

  addEdge() {
    console.log("edge");
    z.string();
    return "";
  }
}",
    "edits": [],
    "endLine": 26,
    "id": "8e0051ad7c49716420e0140ade5add29840c0b96",
    "kind": "ClassDeclaration",
    "name": "NodeRelations",
    "path": "/test-project/src/utils/index.ts",
    "startLine": 14,
    "typeSignature": "class NodeRelations  {
 constructor (hasCycle: boolean) => NodeRelations  NodeRelations.addEdge: () => string
}",
  },
  {
    "block": "export function myFunction(text: string) {
  z.string();
  console.log(text);
  return text;
}",
    "edits": [],
    "endLine": 38,
    "id": "d377594088a1eac0cb38d0b30cce7d28f03f4011",
    "kind": "FunctionDeclaration",
    "name": "myFunction",
    "path": "/test-project/src/utils/index.ts",
    "startLine": 34,
    "typeSignature": "(text: string) => string
",
  },
  {
    "block": "const useQueryFn = () => {
  useQuery({
    queryKey: ["key"],
    queryFn: () => {
      return "data";
    },
  });
};",
    "edits": [],
    "endLine": 12,
    "id": "e467e428b74115c75603dd6f843a91c3adcb5ee1",
    "kind": "VariableDeclaration",
    "name": "useQueryFn",
    "path": "/test-project/src/utils/index.ts",
    "startLine": 5,
    "typeSignature": "useQueryFn = () => {
  useQuery({
    queryKey: ["key"],
    queryFn: () => {
      return "data";
    },
  });
}
",
  },
  {
    "block": "export const date = () =>
  z.string().transform((v) => {
    const date = v.replace(/(\\\\d+)(st|nd|rd|th)/, "$1");
    return isNaN(new Date(date).getTime()) ? undefined : new Date(date);
  });",
    "edits": [],
    "endLine": 32,
    "id": "87b9ecaf3b92371fe3d4b50777f320bfc95b0d82",
    "kind": "VariableDeclaration",
    "name": "date",
    "path": "/test-project/src/utils/index.ts",
    "startLine": 28,
    "typeSignature": "date = () =>
  z.string().transform((v) => {
    const date = v.replace(/(\\\\d+)(st|nd|rd|th)/, "$1");
    return isNaN(new Date(date).getTime()) ? undefined : new Date(date);
  })
",
  },
]
`;

exports[`dependencyGraphService initializes 2`] = `
[
  {
    "source": "1216684097590598af275e16687b2cc97854fca6",
    "target": "3c7052ef9bd663d73fba4ff6d45642ca28fca8a4",
  },
  {
    "source": "1216684097590598af275e16687b2cc97854fca6",
    "target": "434b34fc9e1caa8083526e928d9a0ae576d7876b",
  },
  {
    "source": "011126099144ccb4bcd717bfd267d60587d8cc90",
    "target": "8204690232c2466371e669a014ef72327fa8f369",
  },
  {
    "source": "476de9c76d6f44d72d2b1245a9a93c7b94a99a1f",
    "target": "134600b64a94189aa5713e98127bf32f0ab0f0b6",
  },
  {
    "source": "96e3c33ad729df45fc174ad584ff76561b151355",
    "target": "30fd08e8612650dedd7f10b31ffbc8a44324396f",
  },
  {
    "source": "f71ccda3b25eb2c469d5d7c9d28526b913f28df8",
    "target": "96e3c33ad729df45fc174ad584ff76561b151355",
  },
  {
    "source": "30fd08e8612650dedd7f10b31ffbc8a44324396f",
    "target": "5e4ef8797659e2a8c5c502eec67bbfcd459c9d46",
  },
  {
    "source": "8e0051ad7c49716420e0140ade5add29840c0b96",
    "target": "9f412e876bc9c60f4b805f54a113791059aad2e2",
  },
  {
    "source": "d377594088a1eac0cb38d0b30cce7d28f03f4011",
    "target": "9f412e876bc9c60f4b805f54a113791059aad2e2",
  },
  {
    "source": "d377594088a1eac0cb38d0b30cce7d28f03f4011",
    "target": "476de9c76d6f44d72d2b1245a9a93c7b94a99a1f",
  },
  {
    "source": "e467e428b74115c75603dd6f843a91c3adcb5ee1",
    "target": "b01d70a38703c8b8c0d59b211431fdba0462fd3a",
  },
  {
    "source": "87b9ecaf3b92371fe3d4b50777f320bfc95b0d82",
    "target": "9f412e876bc9c60f4b805f54a113791059aad2e2",
  },
  {
    "source": "87b9ecaf3b92371fe3d4b50777f320bfc95b0d82",
    "target": "011126099144ccb4bcd717bfd267d60587d8cc90",
  },
]
`;
